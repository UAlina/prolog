% Copyright

implement main
    open core, file, stdio

domains
    direction = экономика; дизайн; строительство; программирование.
    mark = a; b; c; d.

class facts - studyDb
    студент : (integer Номер_ст_б, string ФИО). % 1
    направление : (integer Id_напр, direction Направление). % 2
    группа : (integer Id_гр, integer Id_напр, integer Курс, integer Год_созд). % 3
    учится_в : (integer Id_гр, integer Номер_ст_б). % 4
    староста : (integer Id_гр, integer Номер_ст_б). % 5
    предмет : (integer Id_предм, string Предмет, integer Id_напр, integer Курс). % 6
    оценка : (integer Id_предм, integer Номер_ст_б, mark Оценка). % 7
    иностранный_язык : (integer Номер_ст_б, string Язык). % 8
    физкультура : (integer Номер_ст_б, string Физкультура). % 9
    проживает : (integer Номер_ст_б, integer Субъект). % 10
    хобби : (integer Номер_ст_б, string Хобби). % 11
    студ_организации : (integer Номер_ст_б, string Организация). % 12
    олимпиада : (integer Номер_ст_б, string Олимпиада). % 13
    факультатив : (integer Id_факульт, string Факультатив). % 14
    факульт_группы : (integer Id_гр, integer Id_факульт). % 15
    экзамен : (integer Номер_ст_б, integer Русский, integer Математика, integer Третий_предмет). % 16

class facts
    s : (integer Сумма) single.
    count : (integer Количество) single.

clauses
    s(0).
    count(0).

class predicates  %1
    студенты_группы : (integer Id_гр, string ФИО [out]) nondeterm.
clauses
    студенты_группы(Id_гр, ФИО) :-
        writef("\nСостав % группы:\n", Id_гр),
        учится_в(Id_гр, Номер_ст_б),
        студент(Номер_ст_б, ФИО).

class predicates  %2
    старосты_направлений : (direction Направление, string ФИО [out]) nondeterm.
clauses
    старосты_направлений(Направление, ФИО) :-
        writef("\nСтаросты направления %:\n", Направление),
        направление(Id_напр, Направление),
        группа(Id_гр, Id_напр, _, _),
        староста(Id_гр, Номер_ст_б),
        студент(Номер_ст_б, ФИО).

class predicates  %3
    предметы_курса : (direction Направление, integer Курс, string Предмет [out]) nondeterm.
clauses
    предметы_курса(Направление, Курс, Предмет) :-
        writef("\nПредметы для направления % (% курс):\n", Направление, Курс),
        предмет(_, Предмет, Id_напр, Курс),
        направление(Id_напр, Направление).

class predicates  %4
    общий_регион : (string ФИО1 [out], string ФИО2 [out], integer Субъект [out]) nondeterm.
clauses
    общий_регион(ФИО1, ФИО2, Субъект) :-
        writef("\nСтуденты, проживающие в одном регионе\n"),
        студент(Номер_ст_б1, ФИО1),
        студент(Номер_ст_б2, ФИО2),
        Номер_ст_б1 <> Номер_ст_б2,
        проживает(Номер_ст_б1, Субъект),
        проживает(Номер_ст_б2, Субъект).

class predicates  %5
    общие_интересы : (string Хобби, string Орг, string ФИО1 [out], string ФИО2 [out]) nondeterm.
clauses
    общие_интересы(Хобби, Орг, ФИО1, ФИО2) :-
        writef("\nСтуденты, у которых хобби - %, и они состоят в организации %:\n", Хобби, Орг),
        студент(Номер_ст_б1, ФИО1),
        студент(Номер_ст_б2, ФИО2),
        Номер_ст_б1 <> Номер_ст_б2,
        хобби(Номер_ст_б1, Хобби),
        хобби(Номер_ст_б2, Хобби),
        студ_организации(Номер_ст_б1, Орг),
        студ_организации(Номер_ст_б2, Орг).

class predicates  %6
    количество_участников : (string Мероприятие) nondeterm.
clauses
    количество_участников(Олимпиада) :-
        writef("\nУчастники мероприятия %:\n", Олимпиада),
        assert(count(0)),
        олимпиада(_, Олимпиада),
        count(Количество),
        assert(count(Количество + 1)),
        fail.
    количество_участников(_) :-
        count(Количество),
        write("Всего: ", Количество),
        nl.

class predicates  %7
    средний_балл_ЕГЭ : ().
clauses
    средний_балл_ЕГЭ() :-
        writef("\nCредний балл трем предметам:\n"),
        assert(s(0)),
        assert(count(0)),
        экзамен(_, Балл1, Балл2, Балл3), % переделать по 3 предметам
        s(Сумма_баллов),
        count(Количество_студентов),
        assert(s(Сумма_баллов + Балл1 + Балл2 + Балл3)),
        assert(count(Количество_студентов + 1)),
        fail.
    средний_балл_ЕГЭ() :-
        s(Сумма_баллов),
        count(Количество_студентов),
        write("Средний балл: ", math::round(Сумма_баллов / Количество_студентов)),
        nl.

clauses
    run() :-
        file::consult("../study.txt", studyDb),
        fail.

    run() :-
        студенты_группы(1, ФИО),
        write(ФИО),
        nl,
        fail.

    run() :-
        старосты_направлений(дизайн, ФИО),
        write(ФИО),
        nl,
        fail.

    run() :-
        предметы_курса(экономика, 1, Предмет),
        write(Предмет),
        nl,
        fail.

    run() :-
        общий_регион(ФИО1, ФИО2, Субъект),
        writef("% и % живут в % регионе", ФИО1, ФИО2, Субъект),
        nl,
        fail.

    run() :-
        общие_интересы("Пение", "Волонтерство", ФИО1, ФИО2),
        writef("% и %", ФИО1, ФИО2),
        nl,
        fail.

    run() :-
        количество_участников("Универсиада"),
        fail.

    run() :-
        средний_балл_ЕГЭ(),
        fail.

    run().

end implement main

goal
    console::runUtf8(main::run).
